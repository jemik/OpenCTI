#!/usr/bin/env bash
set -euo pipefail

echo "== STEP 0: settings =="
INSTALL_DIR="${INSTALL_DIR:-$PWD/openbas-stack}"

# Versions
PG_VER="${PG_VER:-17-alpine}"
MINIO_VER="${MINIO_VER:-RELEASE.2024-05-28T17-19-04Z}"
RABBIT_VER="${RABBIT_VER:-3.13-management}"
REDIS_VER="${REDIS_VER:-7-alpine}"
ES_VER="${ES_VER:-8.17.4}"
OPENBAS_VER="${OPENBAS_VER:-1.12.2}"  # set to your desired version

# Credentials (auto-generate if empty)
POSTGRES_USER="${POSTGRES_USER:-openbas}"
POSTGRES_PASSWORD="${POSTGRES_PASSWORD:-$(tr -dc A-Za-z0-9 </dev/urandom | head -c 20 || echo p@ssw0rd)}"

MINIO_ROOT_USER="${MINIO_ROOT_USER:-openbasminio}"
MINIO_ROOT_PASSWORD="${MINIO_ROOT_PASSWORD:-$(tr -dc A-Za-z0-9 </dev/urandom | head -c 20 || echo MinioPass123)}"

RABBITMQ_DEFAULT_USER="${RABBITMQ_DEFAULT_USER:-openbas}"
RABBITMQ_DEFAULT_PASS="${RABBITMQ_DEFAULT_PASS:-$(tr -dc A-Za-z0-9 </dev/urandom | head -c 20 || echo RabbitPass123)}"

OPENBAS_ADMIN_EMAIL="${OPENBAS_ADMIN_EMAIL:-admin@example.com}"
OPENBAS_ADMIN_PASSWORD="${OPENBAS_ADMIN_PASSWORD:-$(tr -dc A-Za-z0-9 </dev/urandom | head -c 16 || echo AdminPass123)}"
OPENBAS_ADMIN_TOKEN="${OPENBAS_ADMIN_TOKEN:-$(cat /proc/sys/kernel/random/uuid 2>/dev/null || uuidgen || echo 11111111-1111-1111-1111-111111111111)}"

# Optional mail (leave blank if not needed)
SPRING_MAIL_HOST="${SPRING_MAIL_HOST:-}"
SPRING_MAIL_PORT="${SPRING_MAIL_PORT:-}"
SPRING_MAIL_USERNAME="${SPRING_MAIL_USERNAME:-}"
SPRING_MAIL_PASSWORD="${SPRING_MAIL_PASSWORD:-}"

KEYSTORE_PASSWORD="${KEYSTORE_PASSWORD:-ChangeMeKeystore}"

need_cmd() { command -v "$1" >/dev/null 2>&1 || { echo "ERROR: '$1' not found"; exit 1; }; }

echo "== STEP 1: preflight =="
need_cmd docker
if ! docker compose version >/dev/null 2>&1; then
  echo "ERROR: Docker Compose plugin not found (try: sudo apt-get install docker-compose-plugin)"
  exit 1
fi

if [[ "$(sysctl -n vm.max_map_count 2>/dev/null || echo 0)" -lt 262144 ]]; then
  echo "[i] Setting vm.max_map_count=262144 (sudo)…"
  sudo sysctl -w vm.max_map_count=262144 || true
fi

echo "== STEP 2: create working dir =="
mkdir -p "$INSTALL_DIR"
cd "$INSTALL_DIR" || exit 1
echo "Working in $PWD"

echo "== STEP 3: write .env =="
cat > .env <<EOF
# generated by install_openbas.sh
PG_VER=${PG_VER}
MINIO_VER=${MINIO_VER}
RABBIT_VER=${RABBIT_VER}
REDIS_VER=${REDIS_VER}
ES_VER=${ES_VER}
OPENBAS_VER=${OPENBAS_VER}

POSTGRES_USER=${POSTGRES_USER}
POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
MINIO_ROOT_USER=${MINIO_ROOT_USER}
MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}

OPENBAS_ADMIN_EMAIL=${OPENBAS_ADMIN_EMAIL}
OPENBAS_ADMIN_PASSWORD=${OPENBAS_ADMIN_PASSWORD}
OPENBAS_ADMIN_TOKEN=${OPENBAS_ADMIN_TOKEN}

SPRING_MAIL_HOST=${SPRING_MAIL_HOST}
SPRING_MAIL_PORT=${SPRING_MAIL_PORT}
SPRING_MAIL_USERNAME=${SPRING_MAIL_USERNAME}
SPRING_MAIL_PASSWORD=${SPRING_MAIL_PASSWORD}

KEYSTORE_PASSWORD=${KEYSTORE_PASSWORD}
EOF

echo "== STEP 4: write docker-compose.yml =="
cat > docker-compose.yml <<'YML'
services:
  pgsql:
    image: postgres:${PG_VER}
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: openbas
    volumes:
      - pgsqldata:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d openbas"]
      interval: 10s
      timeout: 5s
      retries: 10

  minio:
    image: minio/minio:${MINIO_VER}
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data
    volumes:
      - s3data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 10

  rabbitmq:
    image: rabbitmq:${RABBIT_VER}
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      RABBITMQ_NODENAME: rabbit01@localhost
    volumes:
      - amqpdata:/var/lib/rabbitmq
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10

  redis:
    image: redis:${REDIS_VER}
    command: redis-server --appendonly yes
    volumes:
      - redisdata:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ES_VER}
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.ml.enabled=false
      - thread_pool.search.queue_size=5000
      - ES_JAVA_OPTS=-Xms2g -Xmx2g
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - esdata:/usr/share/elasticsearch/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=1s >/dev/null"]
      interval: 20s
      timeout: 5s
      retries: 50

  openbas:
    image: openbas/platform:${OPENBAS_VER}
    depends_on:
      pgsql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_started
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Base URL used by the app when building links (set to your server/IP)
      OPENBAS_BASE-URL: http://<YOUR-SERVER-IP>:4000
      # Local auth / admin bootstrap
      OPENBAS_AUTH-LOCAL-ENABLE: "true"
      OPENBAS_ADMIN_EMAIL: ${OPENBAS_ADMIN_EMAIL}
      OPENBAS_ADMIN_PASSWORD: ${OPENBAS_ADMIN_PASSWORD}
      OPENBAS_ADMIN_TOKEN: ${OPENBAS_ADMIN_TOKEN}

      # PostgreSQL
      SPRING_DATASOURCE_URL: jdbc:postgresql://pgsql:5432/openbas
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}

      # RabbitMQ (correct keys)
      OPENBAS_RABBITMQ_HOSTNAME: rabbitmq
      OPENBAS_RABBITMQ_PORT: "5672"
      OPENBAS_RABBITMQ_USER: ${RABBITMQ_DEFAULT_USER}
      OPENBAS_RABBITMQ_PASS: ${RABBITMQ_DEFAULT_PASS}

      # Elasticsearch (Engine) – correct keys
      ENGINE_ENGINE_SELECTOR: elk
      ENGINE_URL: http://elasticsearch:9200

      # MinIO / S3 (correct keys)
      MINIO_ENDPOINT: minio
      MINIO_PORT: "9000"
      MINIO_SECURE: "false"
      MINIO_ACCESS-KEY: ${MINIO_ROOT_USER}
      MINIO_ACCESS-SECRET: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET: openbas

      # (optional) SMTP
      SPRING_MAIL_HOST: ${SPRING_MAIL_HOST}
      SPRING_MAIL_PORT: ${SPRING_MAIL_PORT}
      SPRING_MAIL_USERNAME: ${SPRING_MAIL_USERNAME}
      SPRING_MAIL_PASSWORD: ${SPRING_MAIL_PASSWORD}

      # Keystore (internal)
      SERVER_SSL_KEY-STORE-PASSWORD: ${KEYSTORE_PASSWORD}
    ports:
      - "4000:8080"   # <-- direct access by IP: http://<server-ip>:4000
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:8080/actuator/health | grep -q '\"status\":\"UP\"'"]
      interval: 30s
      timeout: 10s
      retries: 10

volumes:
  pgsqldata:
  s3data:
  amqpdata:
  redisdata:
  esdata:
YML

echo "== STEP 5: docker compose up =="
docker compose -p openbas up -d

echo
echo "== DONE =="
echo "OpenBAS is starting. Give it a minute on first run."
echo "Access URL:  http://<your-server-ip>:4000"
echo
echo "Admin creds:"
echo "  Email   : ${OPENBAS_ADMIN_EMAIL}"
echo "  Password: ${OPENBAS_ADMIN_PASSWORD}"
echo "  API token (OpenCTI integration): ${OPENBAS_ADMIN_TOKEN}"